open import Pervasives
open import List
open import List_extra
open import String
open import String_extra

open import Sail2_operators
open import Sail2_values

val string_sub : string -> ii -> ii -> string
let string_sub str start len =
  toString (take (natFromInteger len) (drop (natFromInteger start) (toCharList str)))

val string_startswith : string -> string -> bool
let string_startswith str1 str2 =
  let prefix = string_sub str1 0 (integerFromNat (stringLength str2)) in
  (prefix = str2)

val string_drop : string -> ii -> string
let string_drop str n =
  toString (drop (natFromInteger n) (toCharList str))

val string_take : string -> ii -> string
let string_take str n =
  toString (take (natFromInteger n) (toCharList str))

val string_length : string -> ii
let string_length s = integerFromNat (stringLength s)

let string_append = stringAppend

(***********************************************
 * Begin stuff that should be in Lem Num_extra *
 ***********************************************)

val maybeIntegerOfString : string -> maybe integer
let maybeIntegerOfString _ = Nothing (* TODO FIXME *)
declare ocaml target_rep function maybeIntegerOfString = `(fun s -> match int_of_string s with i -> Some (Nat_big_num.of_int i) | exception Failure _ -> None )`

(***********************************************
 * end stuff that should be in Lem Num_extra   *
 ***********************************************)

val string_match : string -> string -> bool
let string_match _ _ = true

type __match = bool * list string

val __split : string -> string -> integer -> __match
let __split _ _ _ = (false, [])

val __matched : __match -> bool
let __matched (m, _) = m

val __group : integer -> __match -> string
let __group _ _ = ""